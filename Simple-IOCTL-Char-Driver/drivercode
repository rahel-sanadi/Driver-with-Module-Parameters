#include <linux/init.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/ioctl.h>

#define DEVICE_NAME "ioctl_dev"
#define MAJOR_NUM 240

// Define IOCTL command codes
#define IOCTL_SET_NUM _IOW(MAJOR_NUM, 0, int)
#define IOCTL_GET_NUM _IOR(MAJOR_NUM, 1, int)

MODULE_LICENSE("GPL");

static int my_value = 0; // Variable to be set/get using ioctl

// IOCTL handler function
static long my_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
    int user_val;

    switch (cmd) {
        case IOCTL_SET_NUM:
            if (copy_from_user(&my_value, (int __user *)arg, sizeof(int)))
                return -EFAULT;
            printk( "IOCTL: Set value = %d\n", my_value);
            break;

        case IOCTL_GET_NUM:
            user_val = my_value;
            if (copy_to_user((int __user *)arg, &user_val, sizeof(int)))
                return -EFAULT;
            printk( "IOCTL: Get value = %d\n", user_val);
            break;

        default:
            return -EINVAL;
    }
    return 0;
}

// File operations structure
static struct file_operations fops = {
    .owner = THIS_MODULE,
    .unlocked_ioctl = my_ioctl,
};

// Module init
static int __init ioctl_init(void) {
    int ret = register_chrdev(MAJOR_NUM, DEVICE_NAME, &fops);
    if (ret < 0) {
        printk("IOCTL: Failed to register device\n");
        return ret;
    }
    printk("IOCTL: Registered with major number %d\n", MAJOR_NUM);
    return 0;
}

// Module exit
static void __exit ioctl_exit(void) {
    unregister_chrdev(MAJOR_NUM, DEVICE_NAME);
    printk( "IOCTL: Device unregistered\n");
}

module_init(ioctl_init);
module_exit(ioctl_exit);
